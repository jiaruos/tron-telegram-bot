<?php

namespace app\api\controller;

use app\common\controller\Api; 
use Longman\TelegramBot\Request;
use Tg\TgBot;
use think\Cache;
use Tron\Address;

use log\LogUtil;
use tool\Tool;
use app\tool\library\TgLib;



/**
 * Tg接口
 */
class Tg extends Api
{
    protected $noNeedLogin = ['*'];
    protected $noNeedRight = ['*'];

    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub

        LogUtil::Init(15, "tg_log");
    }

    /**
     * 回调
     *
     */
    public function hook()
    {
        $bot_id = $this->request->get('id'); //机器人id
        $content = file_get_contents("php://input");

        file_put_contents("tg.txt",$content . "\r\n",FILE_APPEND);

        LogUtil::INFO("--------------------------------start-------------------------------");
        LogUtil::INFO("bot_id={$bot_id}");

        if(empty($content)) {
            exit("error");
        }

        $update = json_decode($content, true);
        if(empty($update)) {
            exit("error");
        }
        LogUtil::INFO(Tool::deleteWhiteSpaceChar(json_encode($update, JSON_UNESCAPED_UNICODE)));



        /**
         * 初始化 - 机器人接口实例
         * 没有初始化不会发送消息: sendMessage没有反应
         */
        $TgBot = new TgBot($bot_id);
        $bot = $TgBot->getBot();
        $tgLib = new TgLib();
        
        
        /*
         * 自定义内置按钮
         */
        if(isset($update['callback_query'])) {
            $callback_query = $update['callback_query'];

            $message = $callback_query["message"];
            $message_id = $message['message_id']; //第几条消息 
            $chat_id = $message['chat']['id']; //聊天id   
            $from = $message['from']; //用户 

            if(!empty($callback_query['data'])) {
                
                $callData = $callback_query['data'];
                
                if($callData == "set_bak_btn") {
                    TgLib::sendMessage($chat_id, $message_id, "请回复 备注名 (不要输入太长)");

                    $reply_to_message_address = empty($message['reply_to_message']['text']) ? "空地址" : $message['reply_to_message']['text'];
                    LogUtil::DEBUG("回复点击设置备注名:" . $reply_to_message_address);
                    LogUtil::DEBUG("--------------------------end--------------------------");

                    //@todo: 设置备注名
                    Cache::set(TgLib::SET_BAK_CHAT_ID . $chat_id . '_'.$bot_id, $reply_to_message_address);
                } else {
                    if(strpos($callData, "txlb_") === 0) {
                         ///
                        /// 1.>点击提醒列表返回上一页
                        ///
                        if(strpos($callData, "_back_") !== false) {
                            $tmp = explode("_", $callData);
                            $page = isset($tmp[2]) ? $tmp[2] : 1;

                            LogUtil::DEBUG("回复点击提醒列表后退 page=" . json_encode($tmp, JSON_UNESCAPED_UNICODE));
                            LogUtil::DEBUG("回复点击提醒列表后退 page={$page}");


                            $tgLib->listenersWithPageEdit($chat_id, $bot_id,$message, $page, $callback_query);

                            LogUtil::DEBUG("回复点击提醒列表后退");
                        }
                        
                         ///
                        /// 2.>点击提醒列表下一页
                        ///
                        if(strpos($callData, "_forward_") !== false) {
                            $tmp = explode("_", $callData);
                            $page = isset($tmp[2]) ? $tmp[2] : 1;

                            LogUtil::DEBUG("回复点击提醒列表前进page=" . json_encode($tmp, JSON_UNESCAPED_UNICODE));
                            LogUtil::DEBUG("回复点击提醒列表前进page={$page}");
                            
                            $tgLib->listenersWithPageEdit($chat_id, $bot_id, $message, $page, $callback_query);

                            LogUtil::DEBUG("回复点击提醒列表前进");
                        }
                        
                        
                         ///
                        /// 3.>点击提醒列表某一个地址
                        ///
                        if(strpos($callData, "_address_") !== false) {
                            $tmp = explode("_", $callData);
                            $addressWhich = isset($tmp[2]) ? $tmp[2] : "";
                            if(!empty($addressWhich)) {
                                $tgLib->seeAddressDetail($chat_id,$bot_id, $message, $addressWhich);

                                LogUtil::DEBUG("回复点击提醒列表地址查看详情");
                            }
                        }
                        
                        
                        ///
                        /// 4.>设置地址备注名
                        ///
                        if(strpos($callData, "_setbake_") !== false) {
                            $tmp = explode("_", $callData);
                            $addressWhich = isset($tmp[2]) ? $tmp[2] : "";

                            if(!empty($addressWhich)) {
                                $tgLib->setAddressBak($chat_id, $bot_id,$message, $addressWhich);

                                LogUtil::DEBUG("回复点击提醒列表地址查看详情");
                            }
                        }
                        
                        
                        ///
                        /// 设置地址备注名 - 取消
                        ///
                        if(strpos($callData, "_cancelsetbake_") !== false) { 
                            // $tgLib->cancelSetAddressBak($chat_id,$bot_id, $message, $bot);
                            $tmp = explode("_", $callData);
                            $address = isset($tmp[2]) ? $tmp[2] : "";
                            TgLib::getSetting($address,$chat_id, $bot_id,$message);
                            Cache::rm(TgLib::TXLB_SET_BAK_ADDRESS_KEY . $chat_id.'_'.$bot_id);
                            LogUtil::DEBUG("回复设置地址备注名 - 取消:" . $bot['welcome_content']);
                            LogUtil::DEBUG("--------------------------end--------------------------");
                        }
                        
                        
                        ///
                        /// 删除监控地址
                        ///
                        if(strpos($callData, "_dellistener_") !== false) {
                            $tmp = explode("_", $callData);
                            $addressWhich = isset($tmp[2]) ? $tmp[2] : "";

                            if(!empty($addressWhich)) {
                                $tgLib->delTxlbAddressListeners($chat_id,$bot_id,$message, $addressWhich, $callback_query);

                                LogUtil::DEBUG("回复点击删除监控地址");
                            }
                        }

                        ///
                        /// 提醒日报
                        ///
                        if(strpos($callData, "_dailyreport_") !== false) {
                            $tmp = explode("_", $callData);
                            $addressWhich = isset($tmp[2]) ? $tmp[2] : "";

                            if(!empty($addressWhich)) {
                                 //数据
                                $tgLib->getAddressDayReport($chat_id, $message, $addressWhich, $callback_query);
                                
                                LogUtil::DEBUG("回复点击提醒日报");
                            }
                        }
                        
                    }else{
                        $callData = json_decode($callData,1);
                        if(!isset($callData['fun'])){
                            exit('');
                        }else{
                            $cache_data = cache($callData['key']);
                            $cache_data = json_decode($cache_data,1);
                            // Cache::rm($callData['key']);
                            if($callData['fun'] == 'add_address'){ //添加地址2-收到监听代币类型，返回监听交易类型
                                if(!$cache_data || !isset($cache_data['address'])){
                                    TgLib::sendMessage($chat_id, $message_id, "请填写正确的地址");
                                    return false;
                                }else{
                                    $cache_data['type'] = $callData['type'];
                                    
                                    if($callData['type'] == "exit"){ //删除消息
                                        Request::deleteMessage([
                                                'chat_id'   => $chat_id,
                                                'message_id' => $message['message_id']
                                            ]);
                                    }elseif(in_array($callData['type'],['TRX','USDT','All'])){
                                        TgLib::select_direction($cache_data,$chat_id,$bot_id,$message);
                                    }
                                }
                                
                            }elseif($callData['fun'] == 'select_direction'){ //添加地址3-收到选择交易类型，返回监听结果
                                if(!$cache_data || !isset($cache_data['address'])){
                                    TgLib::sendMessage($chat_id, $message_id, "请填写正确的地址");
                                    return false;
                                }else{
                                    if($callData['type'] == "exit"){ //删除消息
                                        Request::deleteMessage([
                                                'chat_id'   => $chat_id,
                                                'message_id' => $message['message_id']
                                            ]);
                                    }elseif($callData['type'] == "back"){ //返回上一层 发送选择监听交易
                                        if(TgLib::check_address($cache_data['address'],$chat_id, $bot_id,$message)){
                                            Request::deleteMessage([
                                                'chat_id'   => $chat_id,
                                                'message_id' => $message['message_id']
                                            ]);
                                        }
                                    }elseif(in_array($callData['type'],['IN','OUT','All'])){
                                        $cache_data['direction'] = $callData['type'];
                                        $old_message_id = $message['message_id'];
                                        $message['from'] = $callback_query['from'];
                                        $del_message_id = $message['message_id'];
                                        $message['message_id'] = $cache_data['message_id'];
                                        if(TgLib::add_listeners($cache_data['address'], $chat_id, $bot_id,$message, '',$cache_data)){
                                            Request::deleteMessage([
                                                'chat_id'   => $chat_id,
                                                'message_id' => $del_message_id
                                            ]);
                                        }else{
                                            Request::deleteMessage([
                                                'chat_id'   => $chat_id,
                                                'message_id' => $old_message_id
                                            ]);
                                        }
                                    }
                                    
                                    
                                }
                            }elseif($callData['fun'] == "get_setting_address"){ //点击修改设置
                                if(!$cache_data || !isset($cache_data['address'])){
                                    TgLib::sendMessage($chat_id, $message_id, "数据异常，请重新操作");
                                    Request::deleteMessage([
                                                'chat_id'   => $chat_id,
                                                'message_id' => $message['message_id']
                                            ]);
                                    return false;
                                }
                                $address = $cache_data['address'];
                                TgLib::getSetting($address,$chat_id, $bot_id,$message);
                            }elseif($callData['fun'] == "setting_address"){ //点击修改设置
                                $address_data = $cache_data;
                                if(!$cache_data || !isset($cache_data['address'])){
                                    TgLib::sendMessage($chat_id, $message_id, "数据异常，请重新操作");
                                    Request::deleteMessage([
                                                'chat_id'   => $chat_id,
                                                'message_id' => $message['message_id']
                                            ]);
                                    return false;
                                }
                                if($callData['type'] == 'back'){
                                    $res = $tgLib->listenersWithPageEdit($chat_id,$bot_id, $message);
                                }else{
                                    TgLib::setSetting($address_data,$chat_id, $bot_id,$message,$callData['type']);
                                }
                            }
                        }
                        
                    }
                }
            } 
        } 
        else
        { 
            /*
             * 普通消息
             */
            if (!isset($update['message'])) {
                exit('error');
            }

            $message = $update["message"];
            $message_id = $message['message_id']; //第几条消息
            $chat_id = $message['chat']['id']; //聊天id
            $from = $message['from']; //用户 

            //发送内容
            if (isset($message['text'])) {
                $up = [];

                if (isset($from['username'])) {
                    $up['username'] = $from['username'];
                }
                if (isset($from['first_name'])) {
                    $up['nickname'] = $from['first_name'];
                }
                if ($up) {
                    db('user')->where(['chat_id' => $from['id'],'bot_id'=>$bot_id])->update($up);
                }

                $text = $message['text'];
                
                /**
                 * @todo:设置备注名 - 根据缓存设置
                 */
                $setBakChatIdKey = TgLib::SET_BAK_CHAT_ID . $chat_id .'_'.$bot_id;
                $setBakChatAddress = Cache::get($setBakChatIdKey);
                if(!empty($setBakChatAddress)) {
                    $bakAddressKey = TgLib::SET_BAK_ADDRESS . "{$chat_id}_{$bot_id}_{$setBakChatAddress}";
                    $bakAddressData = Cache::get($bakAddressKey);
                    // $bakAddressData = 'yes';
                    if(!empty($bakAddressData) && $bakAddressData == "yes") {
                        $userInfo = db('user')->where(['tg_id' => $chat_id,'bot_id'=>$bot_id,'chat_id'=>$chat_id])->find();
                        LogUtil::DEBUG("查询用户sql:" . db('user')->getLastSql());
                        if (!empty($userInfo))
                        {
                            db("tg_address")
                                ->where("user_id", $userInfo['id'])
                                ->where('bot_id',$bot_id)
                                ->where("address", $setBakChatAddress)
                                ->update([
                                    'bak' => $text
                                ]);
 
                            TgLib::sendMessage($chat_id, $message_id, "设置备注名成功");
                            LogUtil::DEBUG("备注名:" . $text);
                            LogUtil::DEBUG("sql:" . db("tg_address")->getLastSql());
                            LogUtil::DEBUG("回复设置备注名成功:" . $setBakChatAddress);
                            LogUtil::DEBUG("--------------------------end--------------------------");

                            Cache::rm($setBakChatIdKey);
                            Cache::rm($bakAddressKey); 
                            return;
                        }
                    }
                } 
                /**
                 * @todo:设置备注名
                 */
                 
                 
                /**
                 * 从提醒列表-设置备注名 ---------start
                 */
                $txlbSetBakKey = TgLib::TXLB_SET_BAK_ADDRESS_KEY . $chat_id.'_'.$bot_id;
                $txlbSetBakAddress = Cache::get($txlbSetBakKey);
                if(!empty($txlbSetBakAddress)) {
                    $userInfo = db('user')->where(['tg_id' => $chat_id,'bot_id'=>$bot_id,'chat_id'=>$chat_id])->find();
                    if (!empty($userInfo))
                    {
                        $res = db("tg_address")
                            ->where("user_id", $userInfo['id'])
                            ->where('bot_id',$bot_id)
                            ->where("address", $txlbSetBakAddress)
                            ->update([
                                'bak' => $text
                            ]);

                        TgLib::sendMessage($chat_id, $message_id, "设置备注名成功");
                        LogUtil::DEBUG("回复从提醒列表-设置备注名-成功:" . db("tg_address")->getLastSql());
                        LogUtil::DEBUG("回复从提醒列表-设置备注名-成功:" . $txlbSetBakAddress);
                        LogUtil::DEBUG("--------------------------end--------------------------");


                        Cache::rm($txlbSetBakKey); 
                        return;
                    }
                }
                /**
                 * 从提醒列表-设置备注名 ---------end
                 */



                if ($text == "/start" || strpos($text, '/start') === 0 ) {
                    
                    LogUtil::INFO("回复新用户:" . strpos($text, '/start'));
                    
                    
                    //新用户
                    TgLib::start($from, $bot_id, $chat_id, $bot, $message);
                    LogUtil::DEBUG("回复新用户:" . $bot['welcome_content']);
                    LogUtil::DEBUG("--------------------------end--------------------------");

                    db('user')->where(['tg_id' => $from['id'],'bot_id'=>$bot_id])->update(['activation' => '1', 'updatetime' => time()]);
                    return;
                }

                if ($text == "提醒列表" || $text == "/lb" || strpos($text, '/lb') === 0) { 
                    LogUtil::DEBUG("回复提醒列表");
                    //TgLib::listeners($chat_id, $message);
                    $res = $tgLib->listenersWithPage($chat_id,$bot_id, $message);

                    LogUtil::DEBUG("回复提醒列表res=" . json_encode($res));
                    LogUtil::DEBUG("--------------------------end--------------------------");

                    db('user')->where(['bot_id'=>$bot_id,'tg_id' => $from['id']])->update(['activation' => '1', 'updatetime' => time()]);
                    return;
                }

                if ($text == "兑换TRX" || $text == "/dh" || strpos($text, '/dh') === 0) {
                    TgLib::duihuan($chat_id, $bot_id,$message);

                    LogUtil::DEBUG("回复兑换U/TRX");
                    LogUtil::DEBUG("--------------------------end--------------------------");

                    db('user')->where(['tg_id' => $from['id'],'bot_id'=>$bot_id])->update(['activation' => '1', 'updatetime' => time()]);
                    return;
                }
                if($text == "人数" && $bot['tg_id'] == $from['id']){
                    $count = db('user')->where(['bot_id'=>$bot['id']])->count();
                    TgLib::sendMessage($chat_id, $message_id, "当前用户：".$count);
                    return ;
                }

                if (preg_match("/=/", $text) == 1) { //如果匹配上 =
                    if (preg_match("/^del=/", $text) == 1) { //删除监听地址
                        TgLib::del_listeners($text, $chat_id, $bot_id,$message);

                        LogUtil::DEBUG("回复删除监听地址" . $text);
                        LogUtil::DEBUG("--------------------------end--------------------------");
                    } else {
                        $data = explode('=', $text);
                        $address = $data[0]; //可监听的交易地址
                        $bak = $data[1] ?? ''; //备注
                        if($address){
                            TgLib::add_listeners($address, $chat_id, $bot_id,$message, $bak);
                        }
                        

                        LogUtil::DEBUG("回复添加监听地址" . $text);
                        LogUtil::DEBUG("--------------------------end--------------------------");
                    }

                    db('user')->where('bot_id',$bot_id)->where(['tg_id' => $from['id']])->update(['activation' => '1', 'updatetime' => time()]);
                    return;
                }
                


                /*
                 * 以上都不符合, 验证是否是地址
                 */
                $Address = new Address($text);
                if ($Address->isValid()) {
                    // TgLib::add_listeners($text, $chat_id, $bot_id,$message, "");
                    TgLib::check_address($text,$chat_id, $bot_id,$message); //添加地址1-收到监听地址，返回监听代币类型

                    LogUtil::DEBUG("回复添加监听地址" . $text);
                    LogUtil::DEBUG("--------------------------end--------------------------");
                } else {
                    $send_content = db('tg_auto_reply')->where('bot_id',$bot_id)->where('keyword', $text)->value('content');
                    if (empty($send_content)) {
                        TgLib::sendMessage($chat_id, $message_id, $bot['welcome_content']);

                        LogUtil::DEBUG("回复welcome" . $text);
                        LogUtil::DEBUG("--------------------------end--------------------------");
                    } else {
                        TgLib::sendMessage($chat_id, $message_id, $send_content);

                        LogUtil::DEBUG("回复" . $send_content);
                        LogUtil::DEBUG("--------------------------end--------------------------");
                    }
                }

                db('user')->where(['tg_id' => $from['id'],'bot_id'=>$bot_id])->update(['activation' => '1', 'updatetime' => time()]);
            }
        }
    }
}
